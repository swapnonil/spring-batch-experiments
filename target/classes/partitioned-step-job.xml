<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/batch 
	http://www.springframework.org/schema/batch/spring-batch-2.1.xsd">

	<import resource="launch-context.xml" />
	<!-- Fixed Length Job -->
	<job id="partitioned-job-02" restartable="true" xmlns="http://www.springframework.org/schema/batch">
		<step id="partioned-step1">
			<partition step="step01" partitioner="hardCodedPartioner">
				<handler grid-size="4" task-executor="taskExecutor" />
			</partition>
		</step>
	</job>

	<step id="step01" xmlns="http://www.springframework.org/schema/batch">
		<tasklet>
			<chunk reader="recordReader" writer="recordWriter" commit-interval="100" skip-limit="1">
				<skippable-exception-classes>
					<include class="org.springframework.batch.item.ItemReaderException" />
					<include class="org.springframework.batch.item.validator.ValidationException" />
					<exclude class="org.springframework.batch.item.NonTransientResourceException" />
				</skippable-exception-classes>
			</chunk>
		</tasklet>
	</step>

	<bean id="hardCodedPartioner" class="com.swapnonil.springexp.partioning.HardcodedPartioner" />

	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="10" />
		<property name="maxPoolSize" value="15" />
	</bean>

	<!-- Reader Configuration For Fixed Length Job -->
	<bean id="recordReader" class="org.springframework.batch.item.file.FlatFileItemReader">
		<property name="lineMapper" ref="lineMapper" />
		<property name="resource" value="classpath:data.txt" />
	</bean>
	<bean id="lineMapper" class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
		<property name="lineTokenizer" ref="lineTokenizer" />
		<property name="fieldSetMapper" ref="fieldSetMapper" />
	</bean>
	<bean id="lineTokenizer" class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
		<property name="columns" value="1-7,8-17,18-27" />
		<property name="names" value="id,stateName,capital" />
	</bean>
	<bean id="fieldSetMapper" class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
		<property name="prototypeBeanName" value="record" />
	</bean>
	<bean name="record" class="com.swapnonil.springexp.partioning.Record" scope="prototype" />
	<bean name="simpleRecordSeparatorPolicy" class="org.springframework.batch.item.file.separator.SimpleRecordSeparatorPolicy" />

	<!-- Writer Configuration for Fixed Length Job -->
	<bean id="recordWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="assertUpdates" value="true" />
		<property name="dataSource" ref="appDataSource" />
		<property name="itemSqlParameterSourceProvider" ref="itemSqlParameterSourceProvider" />
		<property name="sql" value="INSERT INTO TRAN_RECORDS_VALIDATED_P (id,state_name, capital) VALUES(:id, :stateName, :capital)" />
	</bean>
	<bean id="itemSqlParameterSourceProvider" class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />

	<!-- JDBC Template -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="appJDBCTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="appDataSource" />
	</bean>
</beans>
