<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/batch 
	http://www.springframework.org/schema/batch/spring-batch-2.1.xsd">

	<import resource="launch-context.xml" />
	<!-- Fixed Length Job -->
	<job id="fixed-length-job" restartable="true" xmlns="http://www.springframework.org/schema/batch">
		<step id="step01">
			<tasklet>
				<chunk reader="recordReader" processor="compositeProcessor" writer="recordWriter" commit-interval="3" skip-limit="3000">
					<skippable-exception-classes>
						<include class="org.springframework.batch.item.ItemReaderException" />
						<include class="org.springframework.batch.item.validator.ValidationException" />
						<exclude class="org.springframework.batch.item.NonTransientResourceException" />
					</skippable-exception-classes>
				</chunk>
				<listeners>
					<listener ref="readingSkippedLogger" />
					<listener ref="processorExceptionSkipListener" />
					<listener ref="contextAwareStepExecutionListener" />
				</listeners>
			</tasklet>
		</step>
		<listeners>
			<listener ref="contextAwareJobExecutionListener" />
		</listeners>
	</job>

	<!-- Reader Configuration For Fixed Length Job -->
	<bean id="recordReader" class="org.springframework.batch.item.file.FlatFileItemReader">
		<property name="lineMapper" ref="lineMapper" />
		<property name="resource" value="classpath:fixed-length.txt" />
	</bean>
	<bean id="lineMapper" class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
		<property name="lineTokenizer" ref="lineTokenizer" />
		<property name="fieldSetMapper" ref="fieldSetMapper" />
	</bean>
	<bean id="lineTokenizer" class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
		<property name="columns" value="1-4,5-18,19-36" />
		<property name="names" value="id,name,bankAccountId" />
	</bean>
	<bean id="fieldSetMapper" class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
		<property name="prototypeBeanName" value="record" />
	</bean>
	<bean name="record" class="com.swapnonil.springexp.fixedlengthjob.Record" scope="prototype" />
	<bean name="simpleRecordSeparatorPolicy" class="org.springframework.batch.item.file.separator.SimpleRecordSeparatorPolicy" />

	<!-- Writer Configuration for Fixed Length Job -->
	<bean id="recordWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="assertUpdates" value="true" />
		<property name="dataSource" ref="appDataSource" />
		<property name="itemSqlParameterSourceProvider" ref="itemSqlParameterSourceProvider" />
		<property name="sql" value="INSERT INTO TRANSACTION_RECORDS_VALIDATED (id,name, bank_account_id) VALUES(:id, :name, :bankAccountId)" />
	</bean>
	<bean id="itemSqlParameterSourceProvider" class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />

	<!-- Processor -->
	<bean id="compositeProcessor" class="org.springframework.batch.item.support.CompositeItemProcessor">
		<property name="delegates">
			<list>
				<ref bean="validatingProcessor" />
				<ref bean="filteringProcessor" />
			</list>
		</property>
	</bean>

	<!-- Also move bad records to the faulty transaction table -->
	<bean id="filteringProcessor" class="com.swapnonil.springexp.fixedlengthjob.FilteringItemProcessor" scope="step">
		<property name="jdbcTemplate" ref="appJDBCTemplate" />
		<property name="filterSQL" value="insert into transaction_records_faulty (id, name, bank_account_id, job_name, job_instance_id, job_execution_id, step_execution_id, filename) values (?,?,?,?,?,?,?,?)" />
		<property name="jobName" value="#{jobExecutionContext['jobName']}" />
		<property name="jobInstanceId" value="#{jobExecutionContext['jobInstanceId']}" />
		<property name="jobExecutionId" value="#{jobExecutionContext['jobExecutionId']}" />
		<property name="stepExecutionId" value="#{stepExecutionContext['stepExecutionId']}" />
		<property name="filename" value="#{jobParameters['filename']}" />
	</bean>

	<!-- Validation Processor, Validator used during the processing phase -->
	<bean id="validatingProcessor" class="org.springframework.batch.item.validator.ValidatingItemProcessor">
		<property name="filter" value="false" />
		<property name="validator" ref="accountNumberValidator" />
	</bean>
	<bean id="accountNumberValidator" class="com.swapnonil.springexp.fixedlengthjob.AccountNumberValidator" />

	<!-- Skip,Step and Job Listener, Move records that have been skipped during the reading phase to the batch job exception table -->
	<bean id="readingSkippedLogger" class="com.swapnonil.springexp.fixedlengthjob.ReadingSkippedLoggerListener" scope="step">
		<property name="insertSQL" value="insert into batch_job_exception (job_name,job_instance_id,job_execution_id,step_execution_id,line,line_number,filename,occured_at) values (?,?,?,?,?,?,?,?)" />
		<property name="jdbcTemplate" ref="jdbcTemplate" />
		<property name="jobName" value="#{jobExecutionContext['jobName']}" />
		<property name="jobInstanceId" value="#{jobExecutionContext['jobInstanceId']}" />
		<property name="jobExecutionId" value="#{jobExecutionContext['jobExecutionId']}" />
		<property name="stepExecutionId" value="#{stepExecutionContext['stepExecutionId']}" />
		<property name="filename" value="#{jobParameters['filename']}" />
	</bean>

	<!-- Move all records that have been skipped during the processing phase to the faulty records table -->
	<bean id="processorExceptionSkipListener" class="com.swapnonil.springexp.fixedlengthjob.ProcessorExceptionSkipListener" scope="step">
		<property name="jdbcTemplate" ref="appJDBCTemplate" />
		<property name="filterSQL" value="insert into transaction_records_faulty (id, name, bank_account_id, job_name, job_instance_id, job_execution_id, step_execution_id, filename) values (?,?,?,?,?,?,?,?)" />
		<property name="jobName" value="#{jobExecutionContext['jobName']}" />
		<property name="jobInstanceId" value="#{jobExecutionContext['jobInstanceId']}" />
		<property name="jobExecutionId" value="#{jobExecutionContext['jobExecutionId']}" />
		<property name="stepExecutionId" value="#{stepExecutionContext['stepExecutionId']}" />
		<property name="filename" value="#{jobParameters['filename']}" />
	</bean>

	<bean id="contextAwareStepExecutionListener" class="com.swapnonil.springexp.fixedlengthjob.ContextAwareStepExecutionListener" />
	<bean id="contextAwareJobExecutionListener" class="com.swapnonil.springexp.fixedlengthjob.ContextAwareJobExecutionListener" />

	<!-- JDBC Template -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="appJDBCTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="appDataSource" />
	</bean>
</beans>
